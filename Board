import pygame
import sys
from sudokugenerator import SudokuGenerator
from constants import *

pygame.init()
pygame.display.set_caption("Soduku")
num_font = pygame.font.Font(None, 100)
board = SudokuGenerator


class Board:
    def __init__(self, screen, width=600, height=600, difficulty=0):
        self.width = width
        self.height = height
        self.screen = screen
        self.difficulty = difficulty

    def draw(self):
        # screen = pygame.display.set_mode((self.width, self.height))
        # screen.fill(BG_COLOR)
        for i in range(1, 9):
            pygame.draw.line(self.screen, LINE_COLOR, (0, i * SQUARE_SIZE), (self.width, i * SQUARE_SIZE), LINE_WIDTH)
        for i in range(1, 9):
            pygame.draw.line(self.screen, LINE_COLOR, (i * SQUARE_SIZE, 0), (SQUARE_SIZE * i, self.height), LINE_WIDTH)
        pygame.display.update()

    def select(self, row, col):
        pass

    def click(self, x, y):
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.MOUSEBUTTONDOWN:
                    self.x = x
                    self.y = y
                    (self.x, self.y) = event.pos
                    x = self.y // SQUARE_SIZE
                    y = self.x // SQUARE_SIZE

            pygame.display.update()

    def clear(self):
        pass

    def sketch(self, value):
        pass

    def place_number(self, value):
        self.value = value
        for row in range(9):
            for col in range(9):
                num_surf = num_font.render(str(value), False, CROSS_COLOR)
                num_location = num_surf.get_rect(center=(500, 100))
                self.screen.blit(num_surf, num_location)
                pygame.display.update()

    def reset_to_original(self):
        return self.board.get_board()

    def is_full(self):
        for row in self.board:
            for space in row:
                if space == " ":
                    return False
        return True

    def update_board(self):
        for cell in self.board:
            for item in cell:
                print(self.value)

    def find_empty(self):
        for row in range(9):
            for col in range(9):
                if board.get_board() == 0:
                    return row, col

    def check_board(self):
        pass
